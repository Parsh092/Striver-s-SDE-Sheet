import java.util.* ;
import java.io.*; 
public class Solution {
    public static long count=0;
    public static long mergeSort(long[] arr,long[] B,int low,int mid,int high){
        int i =low;
        int j =mid;
        int k=low;
       long count=0;
        while(i<=mid-1 && j<=high){
            if(arr[i]<=arr[j]){
                B[k++]=arr[i++];
            }
            else{
                B[k++]=arr[j++];
                count+=mid-i;
            }
        }
        while(i<=mid-1){
            B[k++]=arr[i++];
        }
        while(j<=high){
            B[k++]=arr[j++];
        }
        for(i=low;i<=high;i++){
            arr[i]=B[i];
        }
        return count;
    }
    public static long ms(long[] arr,long[] tem,int low,int high){
        long count=0;
        int mid;
        if(low<high){
            mid = (low+high)/2;
            count+=ms(arr,tem,low,mid);
            count+=ms(arr,tem,mid+1,high);
            count+=mergeSort(arr,tem,low,mid+1,high);
        }
        return count;
    }
    public static long getInversions(long arr[], int n) {
        long[] ans = new long[n];
        return ms(arr,ans,0,n-1);
    }
}
