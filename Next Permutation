class Solution {
    public void nextPermutation(int[] nums) {
        int index=-1;
        int n = nums.length;

        // Finding break even point
        for(int i=n-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
                index=i;
                break;
            }
        }

        // Biggest permutation
        if(index==-1){
            for(int i=0;i<n/2;i++){
                int tem = nums[i];
                nums[i]=nums[n-i-1];
                nums[n-i-1]=tem;
            }
            return;
        }

        //Finding the greater element than nums[index] from RHS of that index but smallest of all.
        for(int i=n-1;i>index;i--){
            if(nums[i]>nums[index]){
                int tem = nums[index];
                nums[index]=nums[i];
                nums[i]=tem;
                break;
            }
        }

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i=index+1;i<n;i++){
            pq.offer(nums[i]);
        }
        for(int i=index+1;i<n;i++){
            nums[i]=pq.poll();
        }
    }
}
